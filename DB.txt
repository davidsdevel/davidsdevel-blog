install
express-session
express-fileupload
pg-promise

post: {
	title: String,
	description: String,
	tags: Array,
	content: String,
	commentsCount: Int,
	comments: Array
	created: Timestamp,
	updated: Timestamp,
	image: String,
	url: String
}
user: {
	name: String,
	pic: String,
	fcmToken: String,
	fbToken: String
}

var toolbarOptions = [
	['bold', 'italic', 'underline', 'strike'],
	['blockquote', 'code-block'],
	[{ 'header': 3 }, { 'header': 4 }],
	[{ 'list': 'ordered'}, { 'list': 'bullet' }],
	[{ 'script': 'sub'}, { 'script': 'super' }],
	[{ 'indent': '-1'}, { 'indent': '+1' }],
	[{ 'direction': 'rtl' }],
	[{ 'size': ['small', false, 'large', 'huge'] }],
	[{ 'header': [3, 4, 5, 6, false] }],
	[ 'link', 'image', 'video', 'formula' ],
	[{ 'color': [] }, { 'background': [] }],
	[{ 'font': [] }],
	[{ 'align': [] }],
	['clean']
];

const AlignStyle = Quill.import('attributors/style/align');
const BackgroundStyle = Quill.import('attributors/style/background');
const ColorStyle = Quill.import('attributors/style/color');
const DirectionStyle = Quill.import('attributors/style/direction');
const FontStyle = Quill.import('attributors/style/font');
const SizeStyle = Quill.import('attributors/style/size');

Quill.register(AlignStyle, true);
Quill.register(BackgroundStyle, true);
Quill.register(ColorStyle, true);
Quill.register(DirectionStyle, true);
Quill.register(FontStyle, true);
Quill.register(SizeStyle, true);
	
			var quill = new Quill('#editor', {
				modules: {
					toolbar: toolbarOptions
				},
				theme: 'snow',
				debug:"info"
			});
			quill.on('text-change', function(delta, oldDelta, source) {
				this.content = quill.root.innerHTML;
			});
		},
		methods:{
			publish() {
				if(this.type === "new") {
				}
				else if(this.type === "update") {
				}
			},
			async save() {
				try {
					const requestBody = {
						content:encodeURI(this.content),
						labels:encodeURI(this.labels),
						title:encodeURI(this.title)
					}
					const config = {
						headers: {
							'Content-Type': 'application/x-www-form-urlencoded'
						}
					}
				
					let {data} = await axios.post("https://lavozdeoieniv.herokuapp.com/save-post", requestBody, config)
				} catch(err) {
					alert("Error al guardar");
				}
			}
		}
	}


	<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
	<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>



const editor_options = {
    theme: 'snow',
    modules: {
        toolbar: {
            container: [['bold', 'italic', 'underline', 'strike'], ['link', 'image', 'video']],
            handlers: { image: quill_img_handler },
        },
    },
};

function quill_img_handler() {
    let fileInput = this.container.querySelector('input.ql-image[type=file]');

    if (fileInput == null) {
        fileInput = document.createElement('input');
        fileInput.setAttribute('type', 'file');
        fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
        fileInput.classList.add('ql-image');
        fileInput.addEventListener('change', () => {
            const files = fileInput.files;
            const range = this.quill.getSelection(true);

            if (!files || !files.length) {
                console.log('No files selected');
                return;
            }

            const formData = new FormData();
            formData.append('file', files[0]);

            this.quill.enable(false);

            fetch("/upload-image", {
            		method: "POST",
            		body: formData
            	})
                .then(response => {
                    this.quill.enable(true);
                    this.quill.editor.insertEmbed(range.index, 'image', response.data.url_path);
                    this.quill.setSelection(range.index + 1, Quill.sources.SILENT);
                    fileInput.value = '';
                })
                .catch(error => {
                    console.log('quill image upload failed');
                    console.log(error);
                    this.quill.enable(true);
                });
        });
        this.container.appendChild(fileInput);
    }
    fileInput.click();
}