
FB.ui({
  method: 'share',
  href: 'https://developers.facebook.com/docs/'
}, function(response){});


FB.ui({
  method: 'share_open_graph',
  action_type: 'og.likes',
  action_properties: JSON.stringify({
    object:'https://developers.facebook.com/docs/javascript/examples',
  })
}, function(response){
  // Debug response (optional)
  console.log(response);
});

<script>
  window.fbAsyncInit = function() {
    FB.init({
      appId      : '1715621081901826',
      cookie     : true,
      xfbml      : true,
      version    : '{api-version}'
    });
      
    FB.AppEvents.logPageView();   
      
  };

  (function(d, s, id){
     var js, fjs = d.getElementsByTagName(s)[0];
     if (d.getElementById(id)) {return;}
     js = d.createElement(s); js.id = id;
     js.src = "https://connect.facebook.net/en_US/sdk.js";
     fjs.parentNode.insertBefore(js, fjs);
   }(document, 'script', 'facebook-jssdk'));
</script>

<fb:login-button 
  scope="public_profile,email"
  onlogin="checkLoginState();">
</fb:login-button>

function checkLoginState() {
  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });
}


FB.login(function(response){
  // handle the response 
});

FB.AppEvents.logEvent('Facebook Post Share');


var toolbarOptions = [
		['bold', 'italic', 'underline', 'strike'],        // toggled buttons
		['blockquote', 'code-block'],
		[{ 'header': 3 }, { 'header': 4 }],               // custom button values
		[{ 'list': 'ordered'}, { 'list': 'bullet' }],
		[{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
		[{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
		[{ 'direction': 'rtl' }],                         // text direction
		[{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
		[{ 'header': [3, 4, 5, 6, false] }],
		[ 'link', 'image', 'video', 'formula' ],          // add's image support
		[{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
		[{ 'font': [] }],
		[{ 'align': [] }],
		['clean']                                         // remove formatting button
	];
	export default {
		props:{
			data:{
				type:Object,
				default:()=>{}
			},
			type:{
				type:String,
				required:true,
				default:"new"
			}
		},
		data() {
			return {
				title:"",
				url:"",
				labels:"",
				content:""
			}
		},
		mounted() {
			this.title = this.data.title || "";
			this.url = this.data.url || "";
			this.labels = this.data.labels ? this.data.labels.join(", ") : "";
			let AlignStyle = Quill.import('attributors/style/align');
			let BackgroundStyle = Quill.import('attributors/style/background');
			let ColorStyle = Quill.import('attributors/style/color');
			let DirectionStyle = Quill.import('attributors/style/direction');
			let FontStyle = Quill.import('attributors/style/font');
			let SizeStyle = Quill.import('attributors/style/size');
			Quill.register(AlignStyle, true);
			Quill.register(BackgroundStyle, true);
			Quill.register(ColorStyle, true);
			Quill.register(DirectionStyle, true);
			Quill.register(FontStyle, true);
			Quill.register(SizeStyle, true);
	
			var quill = new Quill('#editor', {
				modules: {
					toolbar: toolbarOptions
				},
				theme: 'snow',
				debug:"info"
			});
			quill.on('text-change', function(delta, oldDelta, source) {
				this.content = quill.root.innerHTML;
			});
		},
		methods:{
			publish() {
				if(this.type === "new") {
				}
				else if(this.type === "update") {
				}
			},
			async save() {
				try {
					const requestBody = {
						content:encodeURI(this.content),
						labels:encodeURI(this.labels),
						title:encodeURI(this.title)
					}
					const config = {
						headers: {
							'Content-Type': 'application/x-www-form-urlencoded'
						}
					}
				
					let {data} = await axios.post("https://lavozdeoieniv.herokuapp.com/save-post", requestBody, config)
				} catch(err) {
					alert("Error al guardar");
				}
			}
		}
	}
